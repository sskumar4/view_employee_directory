{"version":3,"sources":["components/Hero.js","components/Table.js","components/TableHead.js","components/SortedTable.js","components/FilteredTable.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","Table","props","scope","alt","last","src","image","first","phone","email","dob","TableHead","SortedTable","state","alphabetical","sortedEmployees","employees","sortName","sortEmp","empList","sort","a","b","nameA","name","toLowerCase","nameB","setState","console","log","this","length","lastProps","onClick","map","emp","index","key","id","value","picture","thumbnail","title","gender","date","split","React","Component","FilteredTable","searchEmp","filteredEmployees","handleInputChange","event","target","userInp","filteredList","filter","item","age","cell","indexOf","onChange","type","placeholder","axios","get","App","API","then","res","data","results","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ac05f8c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./heroStyle.css\";\r\n\r\nfunction Hero() {\r\n    return (\r\n<div className = \"wrapper\">\r\n    <div className = \"title\">\r\nEmployee Directory\r\n    </div>\r\n    <br></br>\r\n    <div className = \"tagline\">\r\nClick on 'Name' to sort by employee name or use search box to narrow your results\r\n    </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Hero;","import React from \"react\";\n// import \"../index.css\";\n// import 'node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\n\nfunction Table(props) {\n//   return (\n \n//   <BootstrapTable data={props.employees} version='4'>\n//       <TableHeaderColumn  isKey dataField='employees.email'>Email</TableHeaderColumn>\n//       <TableHeaderColumn dataField='cell'>Cell</TableHeaderColumn>\n//       <TableHeaderColumn dataField='gender'>Gender</TableHeaderColumn>\n//       <TableHeaderColumn dataField='email'>Email</TableHeaderColumn>\n//       <TableHeaderColumn dataField='dob.age'>DOB</TableHeaderColumn>\n//   </BootstrapTable>,\n//   document.getElementById('basic')\n// );\n\nreturn (\n\n\n    <tr>\n      <th scope=\"row\">{<img alt={props.last} src={props.image}></img>}</th>\n      <td> {props.first} {props.last}</td>\n      <td>{props.phone}</td>\n      <td>{props.email}</td>\n      <td>{props.dob}</td>\n    </tr>\n\n);\n  }\n\n//   <div className=\"card\">\n//   <div><img alt={props.last} src={props.image}></img></div>\n//   <div>{props.title} {props.first} {props.last} </div>\n//   <div>{props.gender}</div>\n//   <div>{props.age}</div>\n//   <div>{props.phone}</div>\n//   <div>{props.email}</div>\n// </div>\nexport default Table;\n\n\n","import React from \"react\";\r\nfunction TableHead(props) {\r\nreturn (\r\n  <thead className=\"thead-light\">\r\n    <tr>\r\n    <th scope=\"col\">Image</th>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Phone</th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">DOB</th>\r\n    </tr>\r\n  </thead>\r\n    );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport \"./sortedTable.css\";\r\nimport Table from './Table';\r\nimport TableHead from './TableHead';\r\n\r\n\r\nclass SortedTable  extends React.Component {\r\n\r\n  state = {\r\n      alphabetical: true,\r\n      sortedEmployees: [],\r\n      employees: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('SortedTable::CDM',this.props.empList.length)\r\n    console.log('SortedTable::CDM',this.props.empList)\r\n      if (this.state.sortedEmployees.length < 1) {\r\n          this.setState({\r\n              sortedEmployees: this.props.empList\r\n          })\r\n      }\r\n  }\r\n\r\n  componentDidUpdate(lastProps) {\r\n    console.log('SortedTable::CDU',this.props.empList.length)\r\n    console.log('SortedTable::CDU',this.props.empList)\r\n      if (this.props.empList !== lastProps.empList) {\r\n          this.setState({\r\n              sortedEmployees: this.props.empList\r\n          })\r\n      }\r\n  }\r\n\r\n  sortName = () => {\r\n    let sortEmp = [];\r\n    if (this.state.alphabetical) {\r\n        sortEmp = this.props.empList.sort((a, b) => {\r\n            var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n            if (nameA < nameB)\r\n                return -1\r\n            if (nameA > nameB)\r\n                return 1\r\n            return 0\r\n        })\r\n    } else {\r\n        sortEmp = this.props.empList.sort((a, b) => {\r\n            var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n            if (nameA > nameB)\r\n                return -1\r\n            if (nameA < nameB)\r\n                return 1\r\n            return 0\r\n        })\r\n    }\r\n    this.setState({\r\n        alphabetical: !this.state.alphabetical,\r\n        sortedEmployees: sortEmp\r\n\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div> \r\n        <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n          <tr>\r\n          <th scope=\"col\">Image</th>\r\n            <th onClick={this.sortName} className=\"name\" scope=\"col\">Name</th>\r\n            <th scope=\"col\">Phone</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\">DOB</th>\r\n          </tr>\r\n         </thead>\r\n        <tbody>  \r\n        {\r\n        (this.state.sortedEmployees.length > 0) &&\r\n\r\n        this.state.sortedEmployees.map((emp, index) => (\r\n\r\n          <Table\r\n              key={emp.id.value}\r\n              image={emp.picture.thumbnail}\r\n              first={emp.name.first}\r\n              last={emp.name.last}\r\n              title={emp.name.title}\r\n              gender={emp.gender}\r\n              dob={emp.dob.date.split('T')[0]}\r\n              phone={emp.phone}\r\n              email={emp.email}\r\n          />\r\n  ))\r\n\r\n        }\r\n </tbody>\r\n</table>              \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortedTable;\r\n","import React from \"react\";\r\nimport \"./filteredTable.css\";\r\nimport SortedTable from './SortedTable';\r\n\r\nclass FilteredTable extends React.Component {\r\n\r\n    state = {\r\n        searchEmp: \"\",\r\n        filteredEmployees: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log('FilteredTable::length',this.props.employees.length)\r\n        console.log('FilteredTable::employees',this.props.employees)\r\n        if (this.state.filteredEmployees.length < 1) {\r\n            this.setState({\r\n                filteredEmployees: this.props.employees\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleInputChange = event => {\r\n        this.setState({\r\n            searchEmp: event.target.value\r\n        });\r\n        let userInp = event.target.value;\r\n        const filteredList = this.props.employees.filter((item) => {\r\n            let values = item.name.title + item.name.first + item.name.last + item.gender + item.dob.age + item.email + item.cell;\r\n            return values.indexOf(userInp) !== -1;\r\n\r\n        });\r\n\r\n        this.setState({\r\n            filteredEmployees: filteredList\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <form className=\"form\">\r\n            <input\r\n              value={this.state.searchEmp}\r\n              name=\"searchEmp\"\r\n              onChange={event => this.handleInputChange(event)}\r\n              type=\"text\"\r\n              placeholder=\"Search Employee\"\r\n            />\r\n          </form>\r\n            { \r\n                // console.log('length',this.state.filteredEmployees.length);\r\n                // console.log('employees',this.state.filteredEmployees) \r\n            this.state.filteredEmployees.length > 0 &&\r\n                <SortedTable empList={this.state.filteredEmployees} />\r\n            }\r\n        </div>\r\n\r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport default FilteredTable;","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Hero from './components/Hero';\nimport FilteredTable from './components/FilteredTable';\nimport API from \"./utils/API\";\n\nclass App extends React.Component {\n\n  state = {\n    employees: [],\n  };\n\n  componentDidMount() {\n    API.search()\n      .then(res => {this.setState({ employees: res.data.results });\n    console.log('res', res)})\n      .catch(err => console.log(err));\n}\n\n  render() {\n    console.log('length',this.state.employees.length)\n        console.log('employees',this.state.employees)\n    return (\n      <div className=\"App\">\n        <Hero />\n        {this.state.employees.length > 0 &&\n        \n        <FilteredTable employees={this.state.employees}/>\n  }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}